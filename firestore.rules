
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Publicly readable, but only the owner can write.
    match /users/{userId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Usernames: Used to ensure uniqueness.
    // Users can create their username if it doesn't exist.
    // Users can delete their username when they delete their account.
    match /usernames/{username} {
      allow read: if false; // Disallow listing usernames for security.
      // Allow create if user is signed in, the username doesn't exist, and the UID in the document matches the user's UID.
      allow create: if request.auth != null && !exists(path) && request.resource.data.uid == request.auth.uid;
      // Allow delete if the user is signed in and owns this username document.
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }
    
    // Posts: Publicly readable, but only the author can write.
    match /posts/{postId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }

    // Gift Codes: Can be read and updated (to be marked as used), but not created/deleted from the client.
    match /giftCodes/{codeId} {
      allow read, update: if request.auth != null;
      allow create, delete: if false; // Must be managed from a trusted server environment.
    }
    
    // Think Codes: Can be read and updated (to be marked as used), but not created/deleted from the client.
    match /thinkCodes/{codeId} {
      allow read, update: if request.auth != null;
      allow create, delete: if false; // Must be managed from a trusted server environment.
    }
  }
}
